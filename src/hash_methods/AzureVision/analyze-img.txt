#!/usr/bin/bash
# key_1
key="$(cat $(pwd)/src/hash_methods/AzureVision/resource_key.txt)"
endpoint="https://analyze-image-foxik.cognitiveservices.azure.com/"
#echo $key

# Code to call Computer Vision service for image analysis

img_file="resurrected.jpeg"
destination="master/data/imgs"
repository="https://github.com/gyarab/2023-4e-liska-near_duplicate_img_detection"

if [ "$#" -eq 3 ]; then
	img_file=$1
	destination=$2
	repository=$3
else
	echo "Usage: $0 <directory> <destination> <repository>"
    #exit 1
fi


img="$repository/$destination/$img_file"
img=$(echo $img | sed "s/https:\/\/github.com/https:\/\/raw.githubusercontent.com/")
#echo $img
headers=()
headers+=("Ocp-Apim-Subscription-Key: $key")
headers+=("Content-Type: application/json")

body="{\"url\": \"$img\"}"

#echo "Analyzing image..."
result=$(curl -X POST -H "${headers[0]}" -H "${headers[1]}" -d "$body" "$endpoint/vision/v3.2/analyze?visualFeatures=Categories,Description,Objects")

: <<'DEBUG'
# Debug statement to print the result
echo "API Result:"
echo "$result"
DEBUG
# Check if the result is not empty before processing with jq
if [ -n "$result" ]; then
    analysis=$(echo "$result" | jq -r '. | @json')
else
    echo "API call did not return a valid result."
    exit 1
fi

string=$(
echo -e "\n[[Description]]{"
echo "$analysis" | jq -r '.description.captions[].text'
echo "}"

echo -e "\n[[Objects]]{"
echo "$analysis" | jq -r '.objects[].object'
echo "}"

echo -e "\n[[Tags]]{"
echo "$analysis" | jq -r '.description.tags[]'
echo "}"
)

echo $string >&2
echo $string | md5sum | awk '{print $1}'
